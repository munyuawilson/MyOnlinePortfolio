{"ast":null,"code":"import React, { useRef, useEffect, memo } from 'react';\nasync function type(node, ...args) {\n  for (const arg of args) {\n    switch (typeof arg) {\n      case 'string':\n        await edit(node, arg);\n        break;\n      case 'number':\n        await wait(arg);\n        break;\n      case 'function':\n        await arg(node, ...args);\n        break;\n      default:\n        await arg;\n    }\n  }\n}\nasync function edit(node, text) {\n  const overlap = getOverlap(node.textContent, text);\n  await perform(node, [...deleter(node.textContent, overlap), ...writer(text, overlap)]);\n}\nasync function wait(ms) {\n  await new Promise(resolve => setTimeout(resolve, ms));\n}\nasync function perform(node, edits, speed = 60) {\n  for (const op of editor(edits)) {\n    op(node);\n    await wait(speed + speed * (Math.random() - 0.5));\n  }\n}\nfunction* editor(edits) {\n  for (const edit of edits) {\n    yield node => requestAnimationFrame(() => node.textContent = edit);\n  }\n}\nfunction* writer([...text], startIndex = 0, endIndex = text.length) {\n  while (startIndex < endIndex) {\n    yield text.slice(0, ++startIndex).join('');\n  }\n}\nfunction* deleter([...text], startIndex = 0, endIndex = text.length) {\n  while (endIndex > startIndex) {\n    yield text.slice(0, --endIndex).join('');\n  }\n}\nfunction getOverlap(start, [...end]) {\n  return [...start, NaN].findIndex((char, i) => end[i] !== char);\n}\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\nvar css = \".styles_typicalWrapper__1_Uvh::after {\\n  content: \\\"|\\\";\\n  animation: styles_blink__2CKyC 1s infinite step-start;\\n}\\n\\n@keyframes styles_blink__2CKyC {\\n  50% { opacity: 0; }\\n}\";\nvar styles = {\n  \"typicalWrapper\": \"styles_typicalWrapper__1_Uvh\",\n  \"blink\": \"styles_blink__2CKyC\"\n};\nstyleInject(css);\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\nvar Typical = function Typical(_ref) {\n  var steps = _ref.steps,\n    loop = _ref.loop,\n    className = _ref.className,\n    _ref$wrapper = _ref.wrapper,\n    wrapper = _ref$wrapper === undefined ? \"p\" : _ref$wrapper;\n  var typicalRef = useRef(null);\n  var Component = wrapper;\n  var classNames = [styles.typicalWrapper];\n  if (className) {\n    classNames.unshift(className);\n  }\n  useEffect(function () {\n    if (loop === Infinity) {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(steps), [type]));\n    } else if (typeof loop === \"number\") {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(Array(loop).fill(steps).flat())));\n    } else {\n      type.apply(undefined, [typicalRef.current].concat(toConsumableArray(steps)));\n    }\n  });\n  return React.createElement(Component, {\n    ref: typicalRef,\n    className: classNames.join(' ')\n  });\n};\nvar index = memo(Typical);\nexport default index;","map":{"version":3,"sources":["../node_modules/@camwiegert/typical/typical.js","../node_modules/style-inject/dist/style-inject.es.js","../src/index.js"],"names":["Typical","steps","loop","className","wrapper","typicalRef","useRef","Component","classNames","styles","typicalWrapper","unshift","Infinity","current","loopedType","Array","fill","flat","join","memo"],"mappings":"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","sourcesContent":["export async function type(node, ...args) {\n    for (const arg of args) {\n        switch (typeof arg) {\n            case 'string':\n                await edit(node, arg);\n                break;\n            case 'number':\n                await wait(arg);\n                break;\n            case 'function':\n                await arg(node, ...args);\n                break;\n            default:\n                await arg;\n        }\n    }\n}\n\nasync function edit(node, text) {\n    const overlap = getOverlap(node.textContent, text);\n    await perform(node, [...deleter(node.textContent, overlap), ...writer(text, overlap)]);\n}\n\nasync function wait(ms) {\n    await new Promise(resolve => setTimeout(resolve, ms));\n}\n\nasync function perform(node, edits, speed = 60) {\n    for (const op of editor(edits)) {\n        op(node);\n        await wait(speed + speed * (Math.random() - 0.5));\n    }\n}\n\nexport function* editor(edits) {\n    for (const edit of edits) {\n        yield (node) => requestAnimationFrame(() => node.textContent = edit);\n    }\n}\n\nexport function* writer([...text], startIndex = 0, endIndex = text.length) {\n    while (startIndex < endIndex) {\n        yield text.slice(0, ++startIndex).join('');\n    }\n}\n\nexport function* deleter([...text], startIndex = 0, endIndex = text.length) {\n    while (endIndex > startIndex) {\n        yield text.slice(0, --endIndex).join('');\n    }\n}\n\nexport function getOverlap(start, [...end]) {\n    return [...start, NaN].findIndex((char, i) => end[i] !== char);\n}\n","function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","\nimport React, { useRef, useEffect, memo } from \"react\";\nimport { type, type as loopedType } from \"@camwiegert/typical\";\n\nimport styles from './styles.css'\n\nconst Typical = ({ steps, loop, className, wrapper = \"p\" }) => {\n  const typicalRef = useRef(null);\n  const Component = wrapper;\n  const classNames = [styles.typicalWrapper];\n  \n  if (className) {\n    classNames.unshift(className);\n  }\n\n  useEffect(() => {\n    if (loop === Infinity) {\n      type(typicalRef.current, ...steps, loopedType);\n    } else if (typeof loop === \"number\") {\n      type(\n        typicalRef.current,\n        ...Array(loop)\n          .fill(steps)\n          .flat()\n      );\n    } else {\n      type(typicalRef.current, ...steps);\n    }\n  });\n\n  return <Component ref={typicalRef} className={classNames.join(' ')}/>;\n}\n\nexport default memo(Typical)\n"]},"metadata":{},"sourceType":"module"}